text=readLines(names[j])
for (i in length(text):1){
text[i+1]=text[i]
}
text[1]=paste0(">",new_names[j])
writeLines(text,file.path('../fasta',new_names[j]%>%gsub('seq','fasta',.)))
}
}
packageStartupMessage(" Done!")
packageStartupMessage("Vector Screening...", appendLF = FALSE)
setwd('../fasta')
db_vec= blast(db="../../../db/UniVec")
seq=readDNAStringSet(new_names)
data_seq=seq@ranges %>% data.frame()
index_r=new_names%>%grep('R',.)
seq[index_r]=seq[index_r]%>% reverseComplement()
l.vec=array(dim=c(2,2,length(new_names)),
dimnames = list(c(1:2),c('Start.pt','End.pt'),new_names))
vec.mis=c()
index_r
for (k in 1: length(new_names)){
num=predict(db_vec,seq[k])%>% (function(x){x[x$Mismatches<10,]})
if(nrow(num)!=0){
qs= num$Q.start
qe= num$Q.end
d3= data.frame(qs=qs, qe=qe)
d3=d3[order(d3$qs),]
vec=matrix(ncol=2,nrow=2)
vec[1,1]=d3[1,1]
vec[1,2]=d3[1,2]
for (i in 1:(nrow(d3)-1)){
if(d3[i+1,1]<=vec[1,2]){
if(d3[i+1,2]>vec[1,2]){
vec[1,2]=d3[i+1,2]
}}
else if(vec[2,1]%>%is.na()){
vec[2,1]=d3[i+1,1]
vec[2,2]=d3[i+1,2]
}else if(d3[i+1,2]>vec[2,2]){
vec[2,2]=d3[i+1,2]
}
}
l.vec[,,k]=vec
}else{
vec.mis=c(vec.mis, new_names[k])
}
}
packageStartupMessage(" Done!")
folder='rtest3'
#11-11 11-12
primer_f=C6
primer_r=C7
name_primer_f='eer'
name_primer_r='rrwe'
packageStartupMessage("Creating Folders...", appendLF = FALSE)
setwd(desdir)
if (!file.exists(file.path(desdir,'seq',folder,'raw'))){
dir.create(file.path(desdir,'seq',folder,'raw'),recursive = TRUE)
}
if (!file.exists(file.path(desdir,'seq',folder,'fasta'))){
dir.create(file.path(desdir,'seq',folder,'fasta'),recursive = TRUE)
}
if (!file.exists(file.path(desdir,'seq',folder,'fasta.aln'))){
dir.create(file.path(desdir,'seq',folder,'fasta.aln'),recursive = TRUE)
}
if(local){system(paste('cp -r',file.path(local_path,'.'),file.path(desdir,'seq',folder,'raw')))}
packageStartupMessage(" Done!")
packageStartupMessage("Primer Analyzing...", appendLF = FALSE)
primer_f2=primer_f%>%DNAString()%>%reverseComplement()%>%as.character()
primer_r2=primer_r%>%DNAString()%>%reverseComplement()%>%as.character()
primerall=c(primer_f,primer_f2,primer_r,primer_r2)
pro=c('N','R','Y','K','M','W')
sp_N=c('A','T','C','G')
sp_R=c('A','G')
sp_Y=c('T','C')
sp_K=c('T','G')
sp_M=c('A','C')
sp_W=c('A','T')
sp_list=list(sp_N,sp_R,sp_Y,sp_K,sp_M,sp_W)
names(sp_list)=pro
primer=c()
for (pri in 1:4){
listP=list()
for (i in 1:6){
listP[[i]]=strsplit(primerall[pri],'')%>%unlist() %>%grep(pro[i],.)
}
seqn=c()
for (i in 1:6){
seqn[listP[[i]]]=pro[i]
}
seqn=seqn%>%na.omit()%>%as.character()
grid=  expand.grid(if(!is.na(seqn[1])){sp_list[seqn[1]]%>%unlist()}else{NA},
if(!is.na(seqn[2])){sp_list[seqn[2]]%>%unlist()}else{NA},
if(!is.na(seqn[3])){sp_list[seqn[3]]%>%unlist()}else{NA},
if(!is.na(seqn[4])){sp_list[seqn[4]]%>%unlist()}else{NA},
if(!is.na(seqn[5])){sp_list[seqn[5]]%>%unlist()}else{NA},
if(!is.na(seqn[6])){sp_list[seqn[6]]%>%unlist()}else{NA},
if(!is.na(seqn[7])){sp_list[seqn[7]]%>%unlist()}else{NA})
primer=c(primer, primerall[pri]%>% gsub('[NRYKMW]','%s',.) %>%
sprintf(.,grid[,1],grid[,2],grid[,3],grid[,4],grid[,5],grid[,6],grid[,7]))
}
primerraw=primer
primern=c()
for (i in 1:length(primer)){
primern=c(primern,primer[i] %>% substr(.,1,nchar(.)-5),primer[i] %>% substr(.,6,nchar(.)))
}
primer=primern
packageStartupMessage(" Done!")
setwd(file.path(desdir,'seq',folder,'raw'))
if(!local){
packageStartupMessage("File Downloading...", appendLF = FALSE)
filenames= getURL(source,userpwd=paste0(username,':',password),
verbose=TRUE,ftp.use.epsv=TRUE, dirlistonly = TRUE) %>%
strsplit("[\\\\]|[^[:print:]]",fixed = FALSE) %>%
unlist() %>% (function(x){x[grep('seq',x)]})
filepath= sprintf(paste0('ftp://',
paste0(username,':',password),'@',
(source%>%gsub('ftp://','',.)),'%s'),filenames)
for (i in 1:(length(filenames))){
download.file(filepath[i],
file.path(getwd(),filenames[i]),method="libcurl")
}
packageStartupMessage(" Done!")
}
packageStartupMessage("Renaming...", appendLF = FALSE)
names=list.files()
new_names=names
new_names[grep(name_primer_r,names)]= names[grep(name_primer_r,names)] %>%
gsub("^[0-9][0-9]\\.","",.) %>%
gsub(paste0('(',name_primer_r,')'),"_R",.)
new_names[grep(name_primer_f,names)]= names[grep(name_primer_f,names)] %>%
gsub("^[0-9][0-9]\\.","",.) %>%
gsub(paste0('(',name_primer_f,')'),"_F",.)
new_names_split= new_names %>% strsplit('_') %>% unlist()
SN= new_names_split[seq(1,length(new_names_split),2)]
FR= new_names_split[seq(2,length(new_names_split),2)]
nchr= SN %>%  nchar() %>% (function(x){c(min(x),max(x))})
if (nchr[1]!=nchr[2]){
s_index= SN%>%nchar() == nchr[1]
l_index= SN%>%nchar() == nchr[2]
new_names[l_index]=paste0(SN[l_index] %>% substr(1,2),'-',
SN[l_index] %>% substr(3,nchr[2]-2),'-',
SN[l_index] %>% substr(nchr[2]-1,nchr[2]),'_', FR[l_index])
new_names[s_index]=paste0(SN[s_index] %>% substr(1,2),'-',
SN[s_index] %>% substr(3,nchr[1]-1),'-',
SN[s_index] %>% substr(nchr[1],nchr[1]),'_', FR[s_index])
new_names=new_names%>%gsub('.seq','.fasta',.)
for (j in 1:length(names)){
text=readLines(names[j])
for (i in length(text):1){
text[i+1]=text[i]
}
text[1]=paste0(">",new_names[j])
writeLines(text,file.path('../fasta',new_names[j]%>%gsub('seq','fasta',.)))
}
}else{
new_names=paste0(SN %>% substr(1,2),'-',
SN %>% substr(3,nchr[2]-1),'-',
SN %>% substr(nchr[2],nchr[2]),'_',FR)
new_names=new_names%>%gsub('.seq','.fasta',.)
for (j in 1:length(names)){
text=readLines(names[j])
for (i in length(text):1){
text[i+1]=text[i]
}
text[1]=paste0(">",new_names[j])
writeLines(text,file.path('../fasta',new_names[j]%>%gsub('seq','fasta',.)))
}
}
packageStartupMessage(" Done!")
packageStartupMessage("Vector Screening...", appendLF = FALSE)
setwd('../fasta')
db_vec= blast(db="../../../db/UniVec")
seq=readDNAStringSet(new_names)
data_seq=seq@ranges %>% data.frame()
index_r=new_names%>%grep('R',.)
seq[index_r]=seq[index_r]%>% reverseComplement()
l.vec=array(dim=c(2,2,length(new_names)),
dimnames = list(c(1:2),c('Start.pt','End.pt'),new_names))
vec.mis=c()
for (k in 1: length(new_names)){
num=predict(db_vec,seq[k])%>% (function(x){x[x$Mismatches<10,]})
if(nrow(num)!=0){
qs= num$Q.start
qe= num$Q.end
d3= data.frame(qs=qs, qe=qe)
d3=d3[order(d3$qs),]
vec=matrix(ncol=2,nrow=2)
vec[1,1]=d3[1,1]
vec[1,2]=d3[1,2]
for (i in 1:(nrow(d3)-1)){
if(d3[i+1,1]<=vec[1,2]){
if(d3[i+1,2]>vec[1,2]){
vec[1,2]=d3[i+1,2]
}}
else if(vec[2,1]%>%is.na()){
vec[2,1]=d3[i+1,1]
vec[2,2]=d3[i+1,2]
}else if(d3[i+1,2]>vec[2,2]){
vec[2,2]=d3[i+1,2]
}
}
l.vec[,,k]=vec
}else{
vec.mis=c(vec.mis, new_names[k])
}
}
packageStartupMessage(" Done!")
l.vec
folder='rtest3'
setwd(desdir)
if (!file.exists(file.path(desdir,'seq',folder,'raw'))){
dir.create(file.path(desdir,'seq',folder,'raw'),recursive = TRUE)
}
if (!file.exists(file.path(desdir,'seq',folder,'fasta'))){
dir.create(file.path(desdir,'seq',folder,'fasta'),recursive = TRUE)
}
if (!file.exists(file.path(desdir,'seq',folder,'fasta.aln'))){
dir.create(file.path(desdir,'seq',folder,'fasta.aln'),recursive = TRUE)
}
if(local){system(paste('cp -r',file.path(local_path,'.'),file.path(desdir,'seq',folder,'raw')))}
primer_f2=primer_f%>%DNAString()%>%reverseComplement()%>%as.character()
primer_r2=primer_r%>%DNAString()%>%reverseComplement()%>%as.character()
primerall=c(primer_f,primer_f2,primer_r,primer_r2)
pro=c('N','R','Y','K','M','W')
sp_N=c('A','T','C','G')
sp_R=c('A','G')
sp_Y=c('T','C')
sp_K=c('T','G')
sp_M=c('A','C')
sp_W=c('A','T')
sp_list=list(sp_N,sp_R,sp_Y,sp_K,sp_M,sp_W)
names(sp_list)=pro
primer=c()
for (pri in 1:4){
listP=list()
for (i in 1:6){
listP[[i]]=strsplit(primerall[pri],'')%>%unlist() %>%grep(pro[i],.)
}
seqn=c()
for (i in 1:6){
seqn[listP[[i]]]=pro[i]
}
seqn=seqn%>%na.omit()%>%as.character()
grid=  expand.grid(if(!is.na(seqn[1])){sp_list[seqn[1]]%>%unlist()}else{NA},
if(!is.na(seqn[2])){sp_list[seqn[2]]%>%unlist()}else{NA},
if(!is.na(seqn[3])){sp_list[seqn[3]]%>%unlist()}else{NA},
if(!is.na(seqn[4])){sp_list[seqn[4]]%>%unlist()}else{NA},
if(!is.na(seqn[5])){sp_list[seqn[5]]%>%unlist()}else{NA},
if(!is.na(seqn[6])){sp_list[seqn[6]]%>%unlist()}else{NA},
if(!is.na(seqn[7])){sp_list[seqn[7]]%>%unlist()}else{NA})
primer=c(primer, primerall[pri]%>% gsub('[NRYKMW]','%s',.) %>%
sprintf(.,grid[,1],grid[,2],grid[,3],grid[,4],grid[,5],grid[,6],grid[,7]))
}
primerraw=primer
primern=c()
for (i in 1:length(primer)){
primern=c(primern,primer[i] %>% substr(.,1,nchar(.)-5),primer[i] %>% substr(.,6,nchar(.)))
}
primer=primern
setwd(file.path(desdir,'seq',folder,'raw'))
names=list.files()
new_names=names
new_names[grep(name_primer_r,names)]= names[grep(name_primer_r,names)] %>%
gsub("^[0-9][0-9]\\.","",.) %>%
gsub(paste0('(',name_primer_r,')'),"_R",.)
new_names[grep(name_primer_f,names)]= names[grep(name_primer_f,names)] %>%
gsub("^[0-9][0-9]\\.","",.) %>%
gsub(paste0('(',name_primer_f,')'),"_F",.)
new_names_split= new_names %>% strsplit('_') %>% unlist()
SN= new_names_split[seq(1,length(new_names_split),2)]
FR= new_names_split[seq(2,length(new_names_split),2)]
nchr= SN %>%  nchar() %>% (function(x){c(min(x),max(x))})
if (nchr[1]!=nchr[2]){
s_index= SN%>%nchar() == nchr[1]
l_index= SN%>%nchar() == nchr[2]
new_names[l_index]=paste0(SN[l_index] %>% substr(1,2),'-',
SN[l_index] %>% substr(3,nchr[2]-2),'-',
SN[l_index] %>% substr(nchr[2]-1,nchr[2]),'_', FR[l_index])
new_names[s_index]=paste0(SN[s_index] %>% substr(1,2),'-',
SN[s_index] %>% substr(3,nchr[1]-1),'-',
SN[s_index] %>% substr(nchr[1],nchr[1]),'_', FR[s_index])
new_names=new_names%>%gsub('.seq','.fasta',.)
for (j in 1:length(names)){
text=readLines(names[j])
for (i in length(text):1){
text[i+1]=text[i]
}
text[1]=paste0(">",new_names[j])
writeLines(text,file.path('../fasta',new_names[j]%>%gsub('seq','fasta',.)))
}
}else{
new_names=paste0(SN %>% substr(1,2),'-',
SN %>% substr(3,nchr[2]-1),'-',
SN %>% substr(nchr[2],nchr[2]),'_',FR)
new_names=new_names%>%gsub('.seq','.fasta',.)
for (j in 1:length(names)){
text=readLines(names[j])
for (i in length(text):1){
text[i+1]=text[i]
}
text[1]=paste0(">",new_names[j])
writeLines(text,file.path('../fasta',new_names[j]%>%gsub('seq','fasta',.)))
}
}
setwd('../fasta')
db_vec= blast(db="../../../db/UniVec")
seq=readDNAStringSet(new_names)
data_seq=seq@ranges %>% data.frame()
index_r=new_names%>%grep('R',.)
seq[index_r]=seq[index_r]%>% reverseComplement()
l.vec=array(dim=c(2,2,length(new_names)),
dimnames = list(c(1:2),c('Start.pt','End.pt'),new_names))
vec.mis=c()
for (k in 1: length(new_names)){
num=predict(db_vec,seq[k])%>% (function(x){x[x$Mismatches<10,]})
if(nrow(num)!=0){
qs= num$Q.start
qe= num$Q.end
d3= data.frame(qs=qs, qe=qe)
d3=d3[order(d3$qs),]
vec=matrix(ncol=2,nrow=2)
vec[1,1]=d3[1,1]
vec[1,2]=d3[1,2]
for (i in 1:(nrow(d3)-1)){
if(d3[i+1,1]<=vec[1,2]){
if(d3[i+1,2]>vec[1,2]){
vec[1,2]=d3[i+1,2]
}}
else if(vec[2,1]%>%is.na()){
vec[2,1]=d3[i+1,1]
vec[2,2]=d3[i+1,2]
}else if(d3[i+1,2]>vec[2,2]){
vec[2,2]=d3[i+1,2]
}
}
l.vec[,,k]=vec
}else{
vec.mis=c(vec.mis, new_names[k])
}
}
setwd(desdir)
if (!file.exists(file.path(desdir,'seq',folder,'raw'))){
dir.create(file.path(desdir,'seq',folder,'raw'),recursive = TRUE)
}
if (!file.exists(file.path(desdir,'seq',folder,'fasta'))){
dir.create(file.path(desdir,'seq',folder,'fasta'),recursive = TRUE)
}
if (!file.exists(file.path(desdir,'seq',folder,'fasta.aln'))){
dir.create(file.path(desdir,'seq',folder,'fasta.aln'),recursive = TRUE)
}
if(local){system(paste('cp -r',file.path(local_path,'.'),file.path(desdir,'seq',folder,'raw')))}
primer_f2=primer_f%>%DNAString()%>%reverseComplement()%>%as.character()
primer_r2=primer_r%>%DNAString()%>%reverseComplement()%>%as.character()
primerall=c(primer_f,primer_f2,primer_r,primer_r2)
pro=c('N','R','Y','K','M','W')
sp_N=c('A','T','C','G')
sp_R=c('A','G')
sp_Y=c('T','C')
sp_K=c('T','G')
sp_M=c('A','C')
sp_W=c('A','T')
sp_list=list(sp_N,sp_R,sp_Y,sp_K,sp_M,sp_W)
names(sp_list)=pro
primer=c()
for (pri in 1:4){
listP=list()
for (i in 1:6){
listP[[i]]=strsplit(primerall[pri],'')%>%unlist() %>%grep(pro[i],.)
}
seqn=c()
for (i in 1:6){
seqn[listP[[i]]]=pro[i]
}
seqn=seqn%>%na.omit()%>%as.character()
grid=  expand.grid(if(!is.na(seqn[1])){sp_list[seqn[1]]%>%unlist()}else{NA},
if(!is.na(seqn[2])){sp_list[seqn[2]]%>%unlist()}else{NA},
if(!is.na(seqn[3])){sp_list[seqn[3]]%>%unlist()}else{NA},
if(!is.na(seqn[4])){sp_list[seqn[4]]%>%unlist()}else{NA},
if(!is.na(seqn[5])){sp_list[seqn[5]]%>%unlist()}else{NA},
if(!is.na(seqn[6])){sp_list[seqn[6]]%>%unlist()}else{NA},
if(!is.na(seqn[7])){sp_list[seqn[7]]%>%unlist()}else{NA})
primer=c(primer, primerall[pri]%>% gsub('[NRYKMW]','%s',.) %>%
sprintf(.,grid[,1],grid[,2],grid[,3],grid[,4],grid[,5],grid[,6],grid[,7]))
}
primerraw=primer
primern=c()
for (i in 1:length(primer)){
primern=c(primern,primer[i] %>% substr(.,1,nchar(.)-5),primer[i] %>% substr(.,6,nchar(.)))
}
primer=primern
setwd(desdir)
primer_f2=primer_f%>%DNAString()%>%reverseComplement()%>%as.character()
primer_r2=primer_r%>%DNAString()%>%reverseComplement()%>%as.character()
primerall=c(primer_f,primer_f2,primer_r,primer_r2)
pro=c('N','R','Y','K','M','W')
sp_N=c('A','T','C','G')
sp_R=c('A','G')
sp_Y=c('T','C')
sp_K=c('T','G')
sp_M=c('A','C')
sp_W=c('A','T')
sp_list=list(sp_N,sp_R,sp_Y,sp_K,sp_M,sp_W)
names(sp_list)=pro
primer=c()
for (pri in 1:4){
listP=list()
for (i in 1:6){
listP[[i]]=strsplit(primerall[pri],'')%>%unlist() %>%grep(pro[i],.)
}
seqn=c()
for (i in 1:6){
seqn[listP[[i]]]=pro[i]
}
seqn=seqn%>%na.omit()%>%as.character()
grid=  expand.grid(if(!is.na(seqn[1])){sp_list[seqn[1]]%>%unlist()}else{NA},
if(!is.na(seqn[2])){sp_list[seqn[2]]%>%unlist()}else{NA},
if(!is.na(seqn[3])){sp_list[seqn[3]]%>%unlist()}else{NA},
if(!is.na(seqn[4])){sp_list[seqn[4]]%>%unlist()}else{NA},
if(!is.na(seqn[5])){sp_list[seqn[5]]%>%unlist()}else{NA},
if(!is.na(seqn[6])){sp_list[seqn[6]]%>%unlist()}else{NA},
if(!is.na(seqn[7])){sp_list[seqn[7]]%>%unlist()}else{NA})
primer=c(primer, primerall[pri]%>% gsub('[NRYKMW]','%s',.) %>%
sprintf(.,grid[,1],grid[,2],grid[,3],grid[,4],grid[,5],grid[,6],grid[,7]))
}
primerraw=primer
primern=c()
for (i in 1:length(primer)){
primern=c(primern,primer[i] %>% substr(.,1,nchar(.)-5),primer[i] %>% substr(.,6,nchar(.)))
}
primer=primern
setwd(file.path(desdir,'seq',folder,'raw'))
names=list.files()
new_names=names
new_names[grep(name_primer_r,names)]= names[grep(name_primer_r,names)] %>%
gsub("^[0-9][0-9]\\.","",.) %>%
gsub(paste0('(',name_primer_r,')'),"_R",.)
new_names[grep(name_primer_f,names)]= names[grep(name_primer_f,names)] %>%
gsub("^[0-9][0-9]\\.","",.) %>%
gsub(paste0('(',name_primer_f,')'),"_F",.)
new_names_split= new_names %>% strsplit('_') %>% unlist()
SN= new_names_split[seq(1,length(new_names_split),2)]
FR= new_names_split[seq(2,length(new_names_split),2)]
nchr= SN %>%  nchar() %>% (function(x){c(min(x),max(x))})
if (nchr[1]!=nchr[2]){
s_index= SN%>%nchar() == nchr[1]
l_index= SN%>%nchar() == nchr[2]
new_names[l_index]=paste0(SN[l_index] %>% substr(1,2),'-',
SN[l_index] %>% substr(3,nchr[2]-2),'-',
SN[l_index] %>% substr(nchr[2]-1,nchr[2]),'_', FR[l_index])
new_names[s_index]=paste0(SN[s_index] %>% substr(1,2),'-',
SN[s_index] %>% substr(3,nchr[1]-1),'-',
SN[s_index] %>% substr(nchr[1],nchr[1]),'_', FR[s_index])
new_names=new_names%>%gsub('.seq','.fasta',.)
for (j in 1:length(names)){
text=readLines(names[j])
for (i in length(text):1){
text[i+1]=text[i]
}
text[1]=paste0(">",new_names[j])
writeLines(text,file.path('../fasta',new_names[j]%>%gsub('seq','fasta',.)))
}
}else{
new_names=paste0(SN %>% substr(1,2),'-',
SN %>% substr(3,nchr[2]-1),'-',
SN %>% substr(nchr[2],nchr[2]),'_',FR)
new_names=new_names%>%gsub('.seq','.fasta',.)
for (j in 1:length(names)){
text=readLines(names[j])
for (i in length(text):1){
text[i+1]=text[i]
}
text[1]=paste0(">",new_names[j])
writeLines(text,file.path('../fasta',new_names[j]%>%gsub('seq','fasta',.)))
}
}
setwd('../fasta')
db_vec= blast(db="../../../db/UniVec")
seq=readDNAStringSet(new_names)
data_seq=seq@ranges %>% data.frame()
index_r=new_names%>%grep('R',.)
seq[index_r]=seq[index_r]%>% reverseComplement()
l.vec=array(dim=c(2,2,length(new_names)),
dimnames = list(c(1:2),c('Start.pt','End.pt'),new_names))
vec.mis=c()
for (k in 1: length(new_names)){
num=predict(db_vec,seq[k])%>% (function(x){x[x$Mismatches<10,]})
if(nrow(num)!=0){
qs= num$Q.start
qe= num$Q.end
d3= data.frame(qs=qs, qe=qe)
d3=d3[order(d3$qs),]
vec=matrix(ncol=2,nrow=2)
vec[1,1]=d3[1,1]
vec[1,2]=d3[1,2]
for (i in 1:(nrow(d3)-1)){
if(d3[i+1,1]<=vec[1,2]){
if(d3[i+1,2]>vec[1,2]){
vec[1,2]=d3[i+1,2]
}}
else if(vec[2,1]%>%is.na()){
vec[2,1]=d3[i+1,1]
vec[2,2]=d3[i+1,2]
}else if(d3[i+1,2]>vec[2,2]){
vec[2,2]=d3[i+1,2]
}
}
l.vec[,,k]=vec
}else{
vec.mis=c(vec.mis, new_names[k])
}
}
